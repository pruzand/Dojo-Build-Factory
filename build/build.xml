<?xml version="1.0"?>
<project name="DojoBuildFactory" default="buildLayers" basedir=".">

	<target name="init">

		<!-- Mobile resources -->
		<property name="mobileThemes" value="dojox/mobile/themes/android/android.css,dojox/mobile/themes/blackberry/blackberry.css,dojox/mobile/themes/iphone/iphone.css,dojox/mobile/themes/iphone/ipad.css,dojox/mobile/themes/holodark/holodark.css,dojox/mobile/themes/windows/windows.css" />
		<property name="mobileCompatThemes" value="dojox/mobile/themes/android/android-compat.css,dojox/mobile/themes/blackberry/blackberry-compat.css,dojox/mobile/themes/iphone/iphone-compat.css,dojox/mobile/themes/iphone/ipad-compat.css,dojox/mobile/themes/windows/windows-compat.css" />
		<property name="mobileCompatResDir" value="dojox/mobile/themes/android/compat,dojox/mobile/themes/blackberry/compat,dojox/mobile/themes/iphone/compat,dojox/mobile/themes/holodark/compat,dojox/mobile/themes/windows/compat" />
		
		<!-- Comment or remove (value has no effect) this property to *not* concat bundles with their layer -->
		<property name="concatBundleInLayer" value="true"/>
		
		<taskdef resource="net/sf/antcontrib/antlib.xml">
			<classpath>
				<pathelement location="${basedir}/lib/ant-contrib-1.0b3.jar" />
			</classpath>
		</taskdef>
		<!-- Dojo distrib directory -->
		<property name="srcDir" value="${basedir}/src" />
		<!-- Destination directory -->
		<property name="targetDir" value="${basedir}/result" />
		<!-- Library directory (for antlib and compiler.jar) -->
		<property name="libDir" value="${basedir}/lib" />
		<!-- The dojo build system output directory -->
		<property name="tmpDir" value="${basedir}/tmp" />
		<!-- The profiles directory -->
		<property name="profilesDir" value="${basedir}/profiles" />
		<!-- The features directory -->
		<property name="featuresDir" value="${profilesDir}/features" />
		<!-- The file that group all features definitions. Created at build time and passed to the dojo build -->
		<property name="featuresDefFilename" value="featuresdef.js" />
		<!-- The path/filename for the google closure compiler -->
		<property name="jscompjar" location="${libDir}/compiler.jar" />
		<!-- The google closure compiler task -->
		<taskdef name="jscomp" classname="com.google.javascript.jscomp.ant.CompileTask" classpath="${jscompjar}" />


		<echo message="Ant Version     : ${ant.version}" />
		<echo message="Base Dir        : ${basedir}" />
		<echo message="Source Dir      : ${srcDir}" />
		<echo message="Tmp Dir         : ${tmpDir}" />
		<echo message="Target Dir      : ${targetDir}" />

	</target>


	<!-- =========================================================================== -->
	<!-- Concat features definitions into the global __layersFeatures				 -->
	<!-- =========================================================================== -->
	<target name="concatFeaturesDef" depends="init">
		<delete file="${profilesDir}/featuresdef.js" />
		<concat destfile="${profilesDir}/featuresdef.tmp">
			<fileset dir="${featuresDir}" includes="*.js" />
			<filterchain>
				<replaceregex pattern="([\w\s-_]*)=" replace="__layersFeatures.\1=" />
			</filterchain>
		</concat>
		<concat destfile="${profilesDir}/featuresdef.js" force="true">
			<header>
				<![CDATA[
use = function use(){var t = [];for(var i=0;i<arguments.length;++i)t.push(__layersFeatures[arguments[i]]);return Array.prototype.concat.apply([], t);};
__layersFeatures = {};
]]>
			</header>
			<filelist dir="${profilesDir}" files="featuresdef.tmp">
			</filelist>
		</concat>
		<delete file="${profilesDir}/featuresdef.tmp" />
	</target>

	<!-- =========================================================================== -->
	<!-- Targets: dojoBuild                  										 -->
	<!-- =========================================================================== -->
	<target name="buildDojo" depends="init,cleanTmp, concatFeaturesDef">
		<echo message="Running Dojo build with profile: ${profileFile}" />
		<if>
			<isset property="localeListParam" />
			<then>
				<property name="buildArgs" value=" -Dfile.encoding=UTF8 -Xms256m -Xmx256m -cp ../shrinksafe/js.jar${path.separator}../shrinksafe/shrinksafe.jar${path.separator}${libDir}/compiler.jar org.mozilla.javascript.tools.shell.Main ../../dojo/dojo.js load=build --require ../../../profiles/${featuresDefFilename} --profile ../../../profiles/${profileFile}.js --profile ../../../profiles/env-config.js baseUrl=../../dojo --localeList ${localeListParam}" />
			</then>
			<else>
				<property name="buildArgs" value=" -Dfile.encoding=UTF8 -Xms256m -Xmx256m -cp ../shrinksafe/js.jar${path.separator}../shrinksafe/shrinksafe.jar${path.separator}${libDir}/compiler.jar org.mozilla.javascript.tools.shell.Main ../../dojo/dojo.js load=build --require ../../../profiles/${featuresDefFilename} --profile ../../../profiles/${profileFile}.js --profile ../../../profiles/env-config.js baseUrl=../../dojo"/>
			</else>
		</if>
		<echo message="Running Dojo build with arg: ${buildArgs}" />
		<exec dir="${srcDir}/util/buildscripts" executable="java" os="${os.name}" failonerror="yes">
			<arg line="${buildArgs}" />
		</exec>
	</target>

	<!-- =========================================================================== -->
	<!-- extract layers data from build-report.txt 								 -->
	<!-- =========================================================================== -->
	<target name="extractLayersData" depends="init">
		<echo message="Processing build-report to extract layers data..." />
		<loadfile property="report" srcFile="${tmpDir}/build-report.txt" />
		<script language="javascript">
			<![CDATA[
    		rep  = report.slice(report.indexOf("Layer Contents:")+String("Layer Contents:").length, report.indexOf("Process "));
    		var regexp = new RegExp("([-A-Za-z_/-A-Za-z_]*):","g");
    		var layers = rep.match(regexp);
    		var names = [];
    		var nlsPaths = [];
    		if(layers){
	    		for (var i=0;i<layers.length;++i){
	    			layers[i]= layers[i].slice(0,-1);
    				names.push(layers[i].split("/").pop());
    				var p = layers[i].lastIndexOf("/");
    				nlsPaths.push(p !== -1 ? layers[i].slice(0,p)+"/nls/"+names[i] : names[i]);
	    		}
    		}
    		layers = layers.join(",");
    		DojoBuildFactory.setProperty("layersFiles", layers);	
    		self.getProject().setProperty("layersNames", names);	
    		self.getProject().setProperty("layersNls", nlsPaths);
    		regexp = new RegExp("[-A-Za-z_/0-9]*[^.:\r\n\t]","g");
    		var modules = rep.match(regexp);
    		var uncompressedLayered = [];
			for (i=0;i<modules.length;++i){
				uncompressedLayered[i] = modules[i]+"*.uncompressed.*"
    			modules[i] = modules[i]+".*";
    		}
    		self.getProject().setProperty("layeredModules", modules.join(","));    		
    		self.getProject().setProperty("uncompressedLayered", uncompressedLayered.join(","));
			regexp = new RegExp("[^.]*/templates/[^.]*\.html","g");
			var templates = rep.match(regexp);
    		self.getProject().setProperty("layeredTemplates", templates.join(","));    		
    	]]>
		</script>
		<echo message="layeredModules: ${layeredModules}" />
		<echo message="uncpompressd modules: ${uncompressedLayered}"/>
		<echo message="layersFiles: ${layersFiles}" />
	</target>

	<!-- =========================================================================== -->
	<!-- copy the layers 															 -->
	<!-- =========================================================================== -->
	<target name="copyLayers">
		<echo message="Copying layers..." />
		<for list="${layersFiles}" param="file">
			<sequential>
				<echo message="File: @{file}.js" />
				<copy file="${tmpDir}/@{file}.js" toFile="${targetDir}/compressed/@{file}.js" overwrite="true" verbose="true" />
				<copy file="${tmpDir}/@{file}.js.map" toFile="${targetDir}/compressed/@{file}.js.map" overwrite="true" verbose="true" />
				<copy file="${tmpDir}/@{file}.js.uncompressed.js" toFile="${targetDir}/uncompressed/@{file}.js" overwrite="true" verbose="true" />
			</sequential>
		</for>

	</target>

	<!-- =========================================================================== -->
	<!-- copy the mobile css themes													 -->
	<!-- =========================================================================== -->
	<target name="copyMobileThemes" depends="init">
		<echo message="Copying mobile themes..." />
		<for list="${mobileThemes}" param="file">
			<sequential>
				<echo message="File: @{file}" />
				<copy file="${tmpDir}/@{file}" toFile="${targetDir}/compressed/@{file}" failonerror="false" />
				<copy file="${tmpDir}/@{file}" toFile="${targetDir}/uncompressed/@{file}" failonerror="false" />
			</sequential>
		</for>
		<!-- compat themes -->
		<echo message="Copying mobile compat themes..." />
		<for list="${mobileCompatThemes}" param="file">
			<sequential>
				<echo message="File: @{file}" />
				<copy file="${tmpDir}/@{file}" toFile="${targetDir}/compressed/@{file}" failonerror="false" />
				<copy file="${tmpDir}/@{file}" toFile="${targetDir}/uncompressed/@{file}" failonerror="false" />
			</sequential>
		</for>
		<!-- compat resources -->
		<echo message="Copying mobile compat resources..." />
		<for list="${mobileCompatResDir}" param="dir">
			<sequential>
				<echo message="dir=@{dir}" />
				<copy todir="${targetDir}/compressed/@{dir}" failonerror="false" verbose="true" overwrite="true">
					<fileset dir="${tmpDir}/@{dir}" includes="**/*" />
				</copy>
				<copy todir="${targetDir}/uncompressed/@{dir}" failonerror="false" verbose="true" overwrite="true">
					<fileset dir="${tmpDir}/@{dir}" includes="**/*" />
				</copy>
			</sequential>
		</for>
		<!-- dijit and images resources -->
		<echo message="Copying mobile dijit resources..." />
		<for list="android,blackberry,iphone,windows,holodark" param="os">
			<sequential>
				<copy todir="${targetDir}/compressed/dojox/mobile/themes/@{os}/dijit" failonerror="false" verbose="true" overwrite="true">
					<fileset dir="${tmpDir}/dojox/mobile/themes/@{os}/dijit" includes="**/*" excludes="**/*.less" />
				</copy>
				<copy todir="${targetDir}/compressed/dojox/mobile/themes/@{os}/images" failonerror="false" verbose="true" overwrite="true">
					<fileset dir="${tmpDir}/dojox/mobile/themes/@{os}/images" includes="**/*" />
				</copy>
				<copy todir="${targetDir}/uncompressed/dojox/mobile/themes/@{os}/dijit" failonerror="false" verbose="true" overwrite="true">
					<fileset dir="${tmpDir}/dojox/mobile/themes/@{os}/dijit" includes="**/*" excludes="**/*.less" />
				</copy>
				<copy todir="${targetDir}/uncompressed/dojox/mobile/themes/@{os}/images" failonerror="false" verbose="true" overwrite="true">
					<fileset dir="${tmpDir}/dojox/mobile/themes/@{os}/images" includes="**/*" />
				</copy>
			</sequential>
		</for>
		<copy todir="${targetDir}/uncompressed/dojox/mobile/themes/common/dijit" failonerror="false" verbose="true" overwrite="true">
			<fileset dir="${tmpDir}/dojox/mobile/themes/common/dijit" includes="**/*.css" />
		</copy>
		<copy todir="${targetDir}/uncompressed/dojox/mobile/themes/common/compat" failonerror="false" verbose="true" overwrite="true">
			<fileset dir="${tmpDir}/dojox/mobile/themes/common/compat" includes="**/*" />
		</copy>
		<copy todir="${targetDir}/compressed/dojox/mobile/themes/common/dijit" failonerror="false" verbose="true" overwrite="true">
			<fileset dir="${tmpDir}/dojox/mobile/themes/common/dijit" includes="**/*.css" />
		</copy>
		<copy todir="${targetDir}/compressed/dojox/mobile/themes/common/compat" failonerror="false" verbose="true" overwrite="true">
			<fileset dir="${tmpDir}/dojox/mobile/themes/common/compat" includes="**/*" />
		</copy>
	</target>

	<!-- =========================================================================== -->
	<!-- copy possible nls bundles													 -->
	<!-- =========================================================================== -->
	<target name="copyNlsBundles">
		<echo message="Copying Nls Bundles..." />
		<for list="${layersNls}" param="file">
			<sequential>
				<!-- copy uncompressed first -->
				<copy todir="${targetDir}/uncompressed" overwrite="true" verbose="true">
					<fileset dir="${tmpDir}" includes="@{file}_*.js" />
				</copy>
				<!-- copy compressed files-->
				<copy todir="${targetDir}/compressed" overwrite="true" verbose="true">
					<fileset dir="${tmpDir}" includes="@{file}_*.js" />
				</copy>
			</sequential>
		</for>
	</target>

	
	<!-- =========================================================================== -->
	<!-- Concat nls bundles in their corresponding layer							 -->
	<!-- =========================================================================== -->
	<target name="concatNlsInLayer" depends="init,extractLayersData" if="concatBundleInLayer">
		<echo message="Concatenating nls and layers"/>
		<for list="${layersFiles}" param="file">
			<sequential>
				<basename property="filename@{file}" file="@{file}" />
				<propertyregex property="layerDir" input="@{file}" regexp="([^\/]*)[A-Aa-z_-]*" select="\1"></propertyregex>
				<concat destfile="${targetDir}/compressed/@{file}.concat" outputencoding="UTF-8" force="true">
					<sort> 
						<fileset dir="${targetDir}/compressed" includes="${layerDir}/nls/${filename@{file}}_*.js, @{file}.js" />
						<reverse  xmlns="antlib:org.apache.tools.ant.types.resources.comparators" />
					</sort>
				</concat>
				<move file="${targetDir}/compressed/@{file}.concat" tofile="${targetDir}/compressed/@{file}.js" overwrite="true" verbose="true"/>
				<concat destfile="${targetDir}/uncompressed/@{file}.concat" outputencoding="UTF-8" force="true">
					<sort> 
						<fileset dir="${targetDir}/uncompressed" includes="${layerDir}/nls/${filename@{file}}_*.js, @{file}.js" />
						<reverse  xmlns="antlib:org.apache.tools.ant.types.resources.comparators"/>
					</sort>
				</concat>
				<move file="${targetDir}/uncompressed/@{file}.concat" tofile="${targetDir}/uncompressed/@{file}.js" overwrite="true" verbose="true"/>
			</sequential>
		</for>
		
	</target>
	
	<!-- =========================================================================== -->
	<!-- copy the loose modules														 -->
	<!-- =========================================================================== -->
	<target name="copyLooseModules" depends="extractLayersData">
		<echo message="Copying loose modules..." />
		<!-- uncompressed -->
		<copy todir="${targetDir}/uncompressed" overwrite="true" verbose="true" includeEmptyDirs="false">
			<fileset dir="${tmpDir}" excludes="${layeredModules},build-report.txt" includes="**/*.uncompressed.js" />
			<mapper type="regexp" from="(.*).uncompressed.js" to="\1" />
		</copy>
		<copy todir="${targetDir}/uncompressed" overwrite="true" verbose="true" includeEmptyDirs="false">
			<fileset dir="${tmpDir}" excludes="**/*.js,**/*.less,${layeredModules},**/mobile/**,build-report.txt,${layeredTemplates}" />
		</copy>
		<!-- compressed -->
		<copy todir="${targetDir}/compressed" overwrite="true" verbose="true" includeEmptyDirs="false">
			<fileset dir="${tmpDir}" excludes="${layeredModules},dijit/resources/*.js,**/*.js.uncompressed.js,**/*.less,**/mobile/**,build-report.txt,${layeredTemplates}" includes="**/*" />
		</copy>
		<copy todir="${targetDir}/compressed" overwrite="true" verbose="true" includeEmptyDirs="false">
			<fileset dir="${tmpDir}" excludes="${layeredModules},**/*.js.uncompressed.js" includes="**/mobile/*.js" />
		</copy>
		<!-- special case for mobile-ready dijits -->
		<copy todir="${targetDir}/compressed/dijit/" file="${tmpDir}/dijit/ColorPalette.js" />
		<copy todir="${targetDir}/compressed/dijit/" file="${tmpDir}/dijit/_PaletteMixin.js" />
		<copy todir="${targetDir}/compressed/dijit/" file="${tmpDir}/dijit/Calendar.js" />
		<copy todir="${targetDir}/compressed/dijit/" file="${tmpDir}/dijit/CalendarLite.js" />
		<copy todir="${targetDir}/compressed/dijit/" file="${tmpDir}/dijit/typematic.js" />		
		<copy file="${tmpDir}/dijit/ColorPalette.js.uncompressed.js" tofile="${targetDir}/uncompressed/dijit/ColorPalette.js" />
		<copy file="${tmpDir}/dijit/_PaletteMixin.js.uncompressed.js" tofile="${targetDir}/uncompressed/dijit/_PaletteMixin.js" />
		<copy file="${tmpDir}/dijit/typematic.js.uncompressed.js" tofile="${targetDir}/uncompressed/dijit/typematic.js" />
		<copy file="${tmpDir}/dijit/Calendar.js.uncompressed.js" tofile="${targetDir}/uncompressed/dijit/Calendar.js" />
		<copy file="${tmpDir}/dijit/CalendarLite.js.uncompressed.js" tofile="${targetDir}/uncompressed/dijit/CalendarLite.js" />
	</target>

    <target name="zipResult">
        <if>
            <isset property="zipFilename" />
            <then>
                <property name="outputFileName" value="${zipFilename}" />
            </then>
            <else>
                <property name="outputFileName" value="${profileFile}" />
            </else>
        </if>
        <zip destfile="${targetDir}/${outputFileName}-uncompressed.zip" basedir="${targetDir}/uncompressed">
        </zip>
        <zip destfile="${targetDir}/${outputFileName}-compressed.zip" basedir="${targetDir}/compressed">
        </zip>

    </target>
	<!-- =========================================================================== -->
	<!-- Targets: buildLayers		                                                 -->
	<!-- =========================================================================== -->
	<target name="buildLayers" depends="buildDojo, cleanTarget">

		<echo message="Copying resources to target dir: ${targetDir}" />

		<antcall>
			<!-- Process layers data from build report -->
			<target name="extractLayersData" />

			<!-- copy layers -->
			<target name="copyLayers" />

			<!-- copy mobile css -->
			<target name="copyMobileThemes" />

			<!-- copy loose modules file -->
			<target name="copyLooseModules" />

			<!-- copy nls bundles file -->
			<target name="copyNlsBundles" />
			
			<!-- concat layers with their bundles -->
			<!-- NOT NEEDED AND NOT POSSIBLE ANYMORE... -->
			<!-- <target name="concatNlsInLayer" /> --> 
		</antcall>

		<!-- copy build report file -->
		<echo message="Copy build report to ${targetDir}" />
		<copy file="${tmpDir}/build-report.txt" todir="${targetDir}/" />

		<!-- copy build profiles file -->
		<echo message="Copy build profiles to ${targetDir}" />
		<copy file="${profilesDir}/${profileFile}.js" todir="${targetDir}/" />
		<copy file="${profilesDir}/env-config.js" todir="${targetDir}/" />

		<!-- zip the result -->
		<antcall>
            <target name="zipResult" />
		</antcall>


	</target>


	<!-- =========================================================================== -->
	<!-- Targets: cleanTmp, cleanTarget, cleanSrc                                    -->
	<!-- =========================================================================== -->
	<target name="cleanTmp" depends="init">
		<echo message="Clearing tmp directory: ${tmpDir}" />
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${tmpDir}" includes="**/*" excludes="**/.jazzignore,**/.gitignore" />
		</delete>
	</target>

	<target name="cleanSrc" depends="init">
		<echo message="Clearing src directory: ${srcDir}" />
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${srcDir}" includes="**/*" excludes="**/.jazzignore,**/.gitignore" />
		</delete>
	</target>

	<target name="cleanTarget" depends="init">
		<echo message="Clearing target directory: ${targetDir}" />
		<delete includeemptydirs="true" failonerror="false">
			<fileset dir="${targetDir}" includes="**/*" excludes="**/.jazzignore,**/.gitignore" />
		</delete>
	</target>

	<!-- =========================================================================== -->
	<!-- Targets: all                                                                -->
	<!-- =========================================================================== -->
	<target name="all" depends="buildLayers,cleanTmp" />

</project>
